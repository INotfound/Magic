if(CMAKE_BUILD_TYPE STREQUAL Release)
    message("~~~~~~~~~~~~~~Release~~~~~~~~~~~~~~~")
    if(WIN32 AND NOT MINGW)
        message("~~~~~~~~~WIN32 Configuration~~~~~~~~")
    elseif(WIN32 AND MINGW)
        message("~~~~~~~~~MINGW Configuration~~~~~~~~")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
    elseif(UNIX AND NOT ANDROID)
        message("~~~~~~~~~UNIX Configuration~~~~~~~~~")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
    endif()
else()
    message("~~~~~~~~~~~~~~~Debug~~~~~~~~~~~~~~~~")
    if(WIN32 AND NOT MINGW)
        message("~~~~~~~~~WIN32 Configuration~~~~~~~~")
    elseif(WIN32 AND MINGW)
        message("~~~~~~~~~MINGW Configuration~~~~~~~~")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfatal-errors")
    elseif(UNIX AND NOT ANDROID)
        message("~~~~~~~~~UNIX Configuration~~~~~~~~~")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wfatal-errors")
        if(Sanitize STREQUAL Leak)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=leak")
        elseif(Sanitize STREQUAL Address)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer")
        elseif(Sanitize STREQUAL Thread)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread -pie -g")
        elseif(Sanitize STREQUAL Undefined)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
        endif()
    endif()
endif()
# Platform
if(WIN32)
    #WIN32 Library
    set(PLATFORM
        ws2_32
        mswsock
    )
elseif(UNIX)
    #UNIX Library
    set(PLATFORM
    )
endif()

# ThirdParty
find_library(Z z)
find_path(ZLIB zlib.h)
if(NOT ${Z} STREQUAL "Z-NOTFOUND" AND NOT ${ZLIB} STREQUAL "ZLIB-NOTFOUND")
    add_definitions(-DZLIB)
    include_directories(${ZLIB})
    message("Found Library: ${Z}")
    message("Found Header: ${ZLIB}")
    set(THIRDPARTY ${THIRDPARTY} ${Z})
endif()

find_library(SSL ssl)
find_library(CRYPTO crypto)
find_path(OPENSSL openssl/conf.h)
if(NOT ${SSL} STREQUAL "SSL-NOTFOUND" AND NOT ${CRYPTO} STREQUAL "CRYPTO-NOTFOUND")
    add_definitions(-DOPENSSL)
    include_directories(${OPENSSL})
    message("Found Library: ${SSL}")
    message("Found Library: ${CRYPTO}")
    message("Found Header: ${OPENSSL}")
    set(THIRDPARTY ${THIRDPARTY} ${SSL} ${CRYPTO})
endif()

if(MySql STREQUAL ON)
    add_definitions(-DMYSQLDB)
    set(THIRDPARTY ${THIRDPARTY} mariadbclient)
endif()

set(MAGIC_DEPEND_LIBRARY ${PLATFORM} ${THIRDPARTY})