!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEBUG	Src/Log.h	/^        DEBUG = 1,$/;"	e	enum:Log::LogLevel::Level
ERROR	Src/Log.h	/^        ERROR = 4,$/;"	e	enum:Log::LogLevel::Level
Elapse	Src/Log.h	/^    uint64_t Elapse = 0;$/;"	m	class:Log::LogEvent	access:private
FATAL	Src/Log.h	/^        FATAL = 5$/;"	e	enum:Log::LogLevel::Level
FiberId	Src/Log.h	/^    uint64_t FiberId = 0;$/;"	m	class:Log::LogEvent	access:private
File	Src/Log.h	/^    std::string File;$/;"	m	class:Log::LogEvent	access:private
FileLogAppender	Src/Log.cc	/^FileLogAppender::FileLogAppender(const std::string &path)$/;"	f	class:Log::FileLogAppender	signature:(const std::string &path)
FileLogAppender	Src/Log.h	/^    FileLogAppender(const std::string &path);$/;"	p	class:Log::FileLogAppender	access:public	signature:(const std::string &path)
FileLogAppender	Src/Log.h	/^class FileLogAppender : public ILogAppender$/;"	c	namespace:Log	inherits:ILogAppender
Formatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> Formatter;$/;"	m	class:Log::ILogAppender	access:private
Formatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> Formatter;$/;"	m	class:Log::Logger	access:private
ILogAppender	Src/Log.h	/^class ILogAppender$/;"	c	namespace:Log
ILogAppenders	Src/Log.h	/^    std::list<std::shared_ptr<ILogAppender>> ILogAppenders;$/;"	m	class:Log::Logger	access:private
ILogFormatItem	Src/Log.h	/^class ILogFormatItem$/;"	c	namespace:Log
INFO	Src/Log.h	/^        INFO = 2,$/;"	e	enum:Log::LogLevel::Level
Item	Src/Log.h	/^    std::vector<std::shared_ptr<ILogFormatItem>> Item;$/;"	m	class:Log::LogFormatter	access:private
Level	Src/Log.h	/^    LogLevel::Level Level;$/;"	m	class:Log::Logger	access:private
Level	Src/Log.h	/^    enum Level$/;"	g	class:Log::LogLevel	access:public
Line	Src/Log.h	/^    uint32_t Line = 0;$/;"	m	class:Log::LogEvent	access:private
Log	Src/Log.cc	/^namespace Log$/;"	n	file:
Log	Src/Log.h	/^namespace Log$/;"	n
Log::FileLogAppender	Src/Log.h	/^class FileLogAppender : public ILogAppender$/;"	c	namespace:Log	inherits:ILogAppender
Log::FileLogAppender::FileLogAppender	Src/Log.cc	/^FileLogAppender::FileLogAppender(const std::string &path)$/;"	f	class:Log::FileLogAppender	signature:(const std::string &path)
Log::FileLogAppender::FileLogAppender	Src/Log.h	/^    FileLogAppender(const std::string &path);$/;"	p	class:Log::FileLogAppender	access:public	signature:(const std::string &path)
Log::FileLogAppender::OutPutFile	Src/Log.h	/^    std::ofstream OutPutFile;$/;"	m	class:Log::FileLogAppender	access:private
Log::FileLogAppender::Path	Src/Log.h	/^    std::string Path;$/;"	m	class:Log::FileLogAppender	access:private
Log::FileLogAppender::log	Src/Log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::FileLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::FileLogAppender::override	Src/Log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event) override;$/;"	m	class:Log::FileLogAppender	access:public
Log::FileLogAppender::reOpen	Src/Log.cc	/^bool FileLogAppender::reOpen()$/;"	f	class:Log::FileLogAppender	signature:()
Log::FileLogAppender::reOpen	Src/Log.h	/^    bool reOpen();$/;"	p	class:Log::FileLogAppender	access:public	signature:()
Log::ILogAppender	Src/Log.h	/^class ILogAppender$/;"	c	namespace:Log
Log::ILogAppender::Formatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> Formatter;$/;"	m	class:Log::ILogAppender	access:private
Log::ILogAppender::getFormatter	Src/Log.cc	/^std::shared_ptr<LogFormatter> ILogAppender::getFormatter()$/;"	f	class:Log::ILogAppender	signature:()
Log::ILogAppender::getFormatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> getFormatter();$/;"	p	class:Log::ILogAppender	access:public	signature:()
Log::ILogAppender::log	Src/Log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event) = 0;$/;"	p	class:Log::ILogAppender	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::ILogAppender::setFormatter	Src/Log.cc	/^void ILogAppender::setFormatter(std::shared_ptr<LogFormatter> formatter)$/;"	f	class:Log::ILogAppender	signature:(std::shared_ptr<LogFormatter> formatter)
Log::ILogAppender::setFormatter	Src/Log.h	/^    void setFormatter(std::shared_ptr<LogFormatter> formatter);$/;"	p	class:Log::ILogAppender	access:public	signature:(std::shared_ptr<LogFormatter> formatter)
Log::ILogAppender::~ILogAppender	Src/Log.h	/^    virtual ~ILogAppender(){};$/;"	f	class:Log::ILogAppender	access:public	signature:()
Log::ILogFormatItem	Src/Log.h	/^class ILogFormatItem$/;"	c	namespace:Log
Log::ILogFormatItem::format	Src/Log.h	/^    std::string format();$/;"	p	class:Log::ILogFormatItem	access:public	signature:()
Log::ILogFormatItem::~ILogFormatItem	Src/Log.h	/^    virtual ~ILogFormatItem(){};$/;"	f	class:Log::ILogFormatItem	access:public	signature:()
Log::LogEvent	Src/Log.h	/^class LogEvent$/;"	c	namespace:Log
Log::LogEvent::Elapse	Src/Log.h	/^    uint64_t Elapse = 0;$/;"	m	class:Log::LogEvent	access:private
Log::LogEvent::FiberId	Src/Log.h	/^    uint64_t FiberId = 0;$/;"	m	class:Log::LogEvent	access:private
Log::LogEvent::File	Src/Log.h	/^    std::string File;$/;"	m	class:Log::LogEvent	access:private
Log::LogEvent::Line	Src/Log.h	/^    uint32_t Line = 0;$/;"	m	class:Log::LogEvent	access:private
Log::LogEvent::LogEvent	Src/Log.h	/^    LogEvent();$/;"	p	class:Log::LogEvent	access:public	signature:()
Log::LogEvent::ThreadId	Src/Log.h	/^    uint64_t ThreadId = 0;$/;"	m	class:Log::LogEvent	access:private
Log::LogEvent::Time	Src/Log.h	/^    uint64_t Time = 0;$/;"	m	class:Log::LogEvent	access:private
Log::LogFormatter	Src/Log.h	/^class LogFormatter$/;"	c	namespace:Log
Log::LogFormatter::Item	Src/Log.h	/^    std::vector<std::shared_ptr<ILogFormatItem>> Item;$/;"	m	class:Log::LogFormatter	access:private
Log::LogFormatter::format	Src/Log.cc	/^std::string LogFormatter::format(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::LogFormatter	signature:(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::LogFormatter::format	Src/Log.h	/^    std::string format(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event);$/;"	p	class:Log::LogFormatter	access:public	signature:(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::LogFormatter::initFormat	Src/Log.cc	/^void LogFormatter::initFormat(const std::string &pattern)$/;"	f	class:Log::LogFormatter	signature:(const std::string &pattern)
Log::LogFormatter::initFormat	Src/Log.h	/^    void initFormat(const std::string &pattern);$/;"	p	class:Log::LogFormatter	access:public	signature:(const std::string &pattern)
Log::LogLevel	Src/Log.h	/^class LogLevel$/;"	c	namespace:Log
Log::LogLevel::DEBUG	Src/Log.h	/^        DEBUG = 1,$/;"	e	enum:Log::LogLevel::Level
Log::LogLevel::ERROR	Src/Log.h	/^        ERROR = 4,$/;"	e	enum:Log::LogLevel::Level
Log::LogLevel::FATAL	Src/Log.h	/^        FATAL = 5$/;"	e	enum:Log::LogLevel::Level
Log::LogLevel::INFO	Src/Log.h	/^        INFO = 2,$/;"	e	enum:Log::LogLevel::Level
Log::LogLevel::Level	Src/Log.h	/^    enum Level$/;"	g	class:Log::LogLevel	access:public
Log::LogLevel::WARN	Src/Log.h	/^        WARN = 3,$/;"	e	enum:Log::LogLevel::Level
Log::Logger	Src/Log.h	/^class Logger : public std::enable_shared_from_this<Logger>$/;"	c	namespace:Log	inherits:std::enable_shared_from_this
Log::Logger::Formatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> Formatter;$/;"	m	class:Log::Logger	access:private
Log::Logger::ILogAppenders	Src/Log.h	/^    std::list<std::shared_ptr<ILogAppender>> ILogAppenders;$/;"	m	class:Log::Logger	access:private
Log::Logger::Level	Src/Log.h	/^    LogLevel::Level Level;$/;"	m	class:Log::Logger	access:private
Log::Logger::LogName	Src/Log.h	/^    std::string LogName;$/;"	m	class:Log::Logger	access:private
Log::Logger::Logger	Src/Log.cc	/^Logger::Logger(const std::string &name) : LogName(name)$/;"	f	class:Log::Logger	signature:(const std::string &name)
Log::Logger::Logger	Src/Log.h	/^    explicit Logger(const std::string &name = "root");$/;"	p	class:Log::Logger	access:public	signature:(const std::string &name = Ó)
Log::Logger::Root	Src/Log.h	/^    std::shared_ptr<Logger> Root;$/;"	m	class:Log::Logger	access:private
Log::Logger::addILogAppender	Src/Log.cc	/^void Logger::addILogAppender(std::shared_ptr<ILogAppender> logAppender)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<ILogAppender> logAppender)
Log::Logger::addILogAppender	Src/Log.h	/^    void addILogAppender(std::shared_ptr<ILogAppender> logAppender);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<ILogAppender> logAppender)
Log::Logger::debug	Src/Log.cc	/^void Logger::debug(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::debug	Src/Log.h	/^    void debug(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::delILogAppender	Src/Log.cc	/^void Logger::delILogAppender(std::shared_ptr<ILogAppender> logAppender)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<ILogAppender> logAppender)
Log::Logger::delILogAppender	Src/Log.h	/^    void delILogAppender(std::shared_ptr<ILogAppender> logAppender);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<ILogAppender> logAppender)
Log::Logger::error	Src/Log.cc	/^void Logger::error(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::error	Src/Log.h	/^    void error(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::fatal	Src/Log.cc	/^void Logger::fatal(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::fatal	Src/Log.h	/^    void fatal(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::getFormatter	Src/Log.cc	/^std::shared_ptr<LogFormatter> Logger::getFormatter()$/;"	f	class:Log::Logger	signature:()
Log::Logger::getFormatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> getFormatter();$/;"	p	class:Log::Logger	access:public	signature:()
Log::Logger::info	Src/Log.cc	/^void Logger::info(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::info	Src/Log.h	/^    void info(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::log	Src/Log.cc	/^void Logger::log(LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::Logger::log	Src/Log.h	/^    void log(LogLevel::Level level, std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::Logger::setFormatter	Src/Log.cc	/^void Logger::setFormatter(std::shared_ptr<LogFormatter> formatter)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogFormatter> formatter)
Log::Logger::setFormatter	Src/Log.h	/^    void setFormatter(const std::string &val);$/;"	p	class:Log::Logger	access:public	signature:(const std::string &val)
Log::Logger::setFormatter	Src/Log.h	/^    void setFormatter(std::shared_ptr<LogFormatter> formatter);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogFormatter> formatter)
Log::Logger::warn	Src/Log.cc	/^void Logger::warn(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
Log::Logger::warn	Src/Log.h	/^    void warn(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
Log::StdOutLogAppender	Src/Log.h	/^class StdOutLogAppender : public ILogAppender$/;"	c	namespace:Log	inherits:ILogAppender
Log::StdOutLogAppender::log	Src/Log.cc	/^void StdOutLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::StdOutLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
Log::StdOutLogAppender::override	Src/Log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event) override;$/;"	m	class:Log::StdOutLogAppender	access:public
LogEvent	Src/Log.h	/^    LogEvent();$/;"	p	class:Log::LogEvent	access:public	signature:()
LogEvent	Src/Log.h	/^class LogEvent$/;"	c	namespace:Log
LogFormatter	Src/Log.h	/^class LogFormatter$/;"	c	namespace:Log
LogLevel	Src/Log.h	/^class LogLevel$/;"	c	namespace:Log
LogName	Src/Log.h	/^    std::string LogName;$/;"	m	class:Log::Logger	access:private
Logger	Src/Log.cc	/^Logger::Logger(const std::string &name) : LogName(name)$/;"	f	class:Log::Logger	signature:(const std::string &name)
Logger	Src/Log.h	/^    explicit Logger(const std::string &name = "root");$/;"	p	class:Log::Logger	access:public	signature:(const std::string &name = Ó)
Logger	Src/Log.h	/^class Logger : public std::enable_shared_from_this<Logger>$/;"	c	namespace:Log	inherits:std::enable_shared_from_this
OutPutFile	Src/Log.h	/^    std::ofstream OutPutFile;$/;"	m	class:Log::FileLogAppender	access:private
Path	Src/Log.h	/^    std::string Path;$/;"	m	class:Log::FileLogAppender	access:private
Root	Src/Log.h	/^    std::shared_ptr<Logger> Root;$/;"	m	class:Log::Logger	access:private
StdOutLogAppender	Src/Log.h	/^class StdOutLogAppender : public ILogAppender$/;"	c	namespace:Log	inherits:ILogAppender
ThreadId	Src/Log.h	/^    uint64_t ThreadId = 0;$/;"	m	class:Log::LogEvent	access:private
Time	Src/Log.h	/^    uint64_t Time = 0;$/;"	m	class:Log::LogEvent	access:private
WARN	Src/Log.h	/^        WARN = 3,$/;"	e	enum:Log::LogLevel::Level
addILogAppender	Src/Log.cc	/^void Logger::addILogAppender(std::shared_ptr<ILogAppender> logAppender)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<ILogAppender> logAppender)
addILogAppender	Src/Log.h	/^    void addILogAppender(std::shared_ptr<ILogAppender> logAppender);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<ILogAppender> logAppender)
debug	Src/Log.cc	/^void Logger::debug(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
debug	Src/Log.h	/^    void debug(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
delILogAppender	Src/Log.cc	/^void Logger::delILogAppender(std::shared_ptr<ILogAppender> logAppender)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<ILogAppender> logAppender)
delILogAppender	Src/Log.h	/^    void delILogAppender(std::shared_ptr<ILogAppender> logAppender);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<ILogAppender> logAppender)
error	Src/Log.cc	/^void Logger::error(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
error	Src/Log.h	/^    void error(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
fatal	Src/Log.cc	/^void Logger::fatal(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
fatal	Src/Log.h	/^    void fatal(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
format	Src/Log.cc	/^std::string LogFormatter::format(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::LogFormatter	signature:(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
format	Src/Log.h	/^    std::string format();$/;"	p	class:Log::ILogFormatItem	access:public	signature:()
format	Src/Log.h	/^    std::string format(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event);$/;"	p	class:Log::LogFormatter	access:public	signature:(std::ostream &os, std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
getFormatter	Src/Log.cc	/^std::shared_ptr<LogFormatter> ILogAppender::getFormatter()$/;"	f	class:Log::ILogAppender	signature:()
getFormatter	Src/Log.cc	/^std::shared_ptr<LogFormatter> Logger::getFormatter()$/;"	f	class:Log::Logger	signature:()
getFormatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> getFormatter();$/;"	p	class:Log::ILogAppender	access:public	signature:()
getFormatter	Src/Log.h	/^    std::shared_ptr<LogFormatter> getFormatter();$/;"	p	class:Log::Logger	access:public	signature:()
info	Src/Log.cc	/^void Logger::info(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
info	Src/Log.h	/^    void info(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
initFormat	Src/Log.cc	/^void LogFormatter::initFormat(const std::string &pattern)$/;"	f	class:Log::LogFormatter	signature:(const std::string &pattern)
initFormat	Src/Log.h	/^    void initFormat(const std::string &pattern);$/;"	p	class:Log::LogFormatter	access:public	signature:(const std::string &pattern)
log	Src/Log.cc	/^void FileLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::FileLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
log	Src/Log.cc	/^void Logger::log(LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(LogLevel::Level level, std::shared_ptr<LogEvent> event)
log	Src/Log.cc	/^void StdOutLogAppender::log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)$/;"	f	class:Log::StdOutLogAppender	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
log	Src/Log.h	/^    virtual void log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event) = 0;$/;"	p	class:Log::ILogAppender	access:public	signature:(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event)
log	Src/Log.h	/^    void log(LogLevel::Level level, std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(LogLevel::Level level, std::shared_ptr<LogEvent> event)
main	Main.cpp	/^int main(){$/;"	f	signature:()
override	Src/Log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event) override;$/;"	m	class:Log::FileLogAppender	access:public
override	Src/Log.h	/^    void log(std::shared_ptr<Logger> logger, LogLevel::Level level, std::shared_ptr<LogEvent> event) override;$/;"	m	class:Log::StdOutLogAppender	access:public
reOpen	Src/Log.cc	/^bool FileLogAppender::reOpen()$/;"	f	class:Log::FileLogAppender	signature:()
reOpen	Src/Log.h	/^    bool reOpen();$/;"	p	class:Log::FileLogAppender	access:public	signature:()
setFormatter	Src/Log.cc	/^void ILogAppender::setFormatter(std::shared_ptr<LogFormatter> formatter)$/;"	f	class:Log::ILogAppender	signature:(std::shared_ptr<LogFormatter> formatter)
setFormatter	Src/Log.cc	/^void Logger::setFormatter(std::shared_ptr<LogFormatter> formatter)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogFormatter> formatter)
setFormatter	Src/Log.h	/^    void setFormatter(const std::string &val);$/;"	p	class:Log::Logger	access:public	signature:(const std::string &val)
setFormatter	Src/Log.h	/^    void setFormatter(std::shared_ptr<LogFormatter> formatter);$/;"	p	class:Log::ILogAppender	access:public	signature:(std::shared_ptr<LogFormatter> formatter)
setFormatter	Src/Log.h	/^    void setFormatter(std::shared_ptr<LogFormatter> formatter);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogFormatter> formatter)
warn	Src/Log.cc	/^void Logger::warn(std::shared_ptr<LogEvent> event)$/;"	f	class:Log::Logger	signature:(std::shared_ptr<LogEvent> event)
warn	Src/Log.h	/^    void warn(std::shared_ptr<LogEvent> event);$/;"	p	class:Log::Logger	access:public	signature:(std::shared_ptr<LogEvent> event)
~ILogAppender	Src/Log.h	/^    virtual ~ILogAppender(){};$/;"	f	class:Log::ILogAppender	access:public	signature:()
~ILogFormatItem	Src/Log.h	/^    virtual ~ILogFormatItem(){};$/;"	f	class:Log::ILogFormatItem	access:public	signature:()
